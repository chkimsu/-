"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toBanmal = toBanmal;
exports.toHonorific = toHonorific;
var _utils = require("./utils");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var FIRST_REGEX = /(\s)?(^[가-힣]{0,3}|[가-힣]{1,3})(\s*)/;
var LAST_REGEX = /([\.|\,|\s])/;
var formater = [[["습니다"], ["다"]], [["주세요"], ["라"]], [["입니다"], ["이다"]], [["합니다"], ["하다"]], [["옵니다"], ["온다"]], [["됩니다"], ["된다"]], [["갑니다"], ["간다"]], [["깁니다"], ["긴다"]], [["십니다"], ["신다"]], [["랍니다"], ["란다"]], [["저는"], ["나는"]]];
var makeRegByFormater = function makeRegByFormater(array) {
  var result = [];
  array.forEach(function (caseList) {
    var case1List = caseList[0].map(function (case1) {
      return new RegExp(FIRST_REGEX.source + case1 + LAST_REGEX.source, "g");
    });
    var list = case1List.reduce(function (acc2, regex) {
      return acc2.concat(caseList[1].map(function (case2) {
        return [regex, "$1\u037E$2\u037E$3\u037E".concat(case2.split("").join(";"), "\u037E$4")];
      }));
    }, []);
    result.push.apply(result, _toConsumableArray(list));
  });
  return result;
};
var BANMAL_REGEX_LIST = makeRegByFormater(formater);
var HONORIFIC_REGEX_LIST = makeRegByFormater((0, _utils.reverseByArray)(formater));
function toBanmal(string) {
  return BANMAL_REGEX_LIST.reduce(function (acc, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
      $1 = _ref2[0],
      $2 = _ref2[1];
    return acc.replace($1, $2);
  }, string).replace(/;/g, "");
}
function toHonorific(string) {
  return HONORIFIC_REGEX_LIST.reduce(function (acc, _ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
      $1 = _ref4[0],
      $2 = _ref4[1];
    return acc.replace($1, $2);
  }, string).replace(/;/g, "");
}